== Scala Time ==
'''scala-time''' is a simple Scala wrapper for easier use JDK 1.8.0 (Java 8) time APIs

==== Overview ====
The library is contained in the [[codes.reactive.scalatime scalatime]] which includes type aliases, as well as
factory objects for core '''java.time''' types and constant values.

It is further divided into packages corresponding to the underlying
[[http://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html java.time]] package - with the exception of
the [[codes.reactive.scalatime.syntax syntax]] package which includes additional implicit conversion functions as well as
methods for easier use of the underlying java types; and the [[codes.reactive.scalatime.control control]] package
which provides default [[scala.util.control.Exception.Catcher]] instances for exceptions which may be thrown by the
underlying library, and type aliases for those exceptions.

==== Package Structure ====
  - [[codes.reactive.scalatime.temporal temporal]]  - Access to date and time using fields and units, and date time adjusters.
  - [[codes.reactive.scalatime.chrono chrono]]  - Generic API for calendar systems other than the default ISO.
  - [[codes.reactive.scalatime.control control]]    - [[scala.util.control.Exception.Catcher]] instances.
  - [[codes.reactive.scalatime.format format]]  - Provides classes to print and parse dates and times.
  - [[codes.reactive.scalatime.syntax syntax]]    - Implicit functions, and methods for easier use of time APIs.



@example
{{{
    // Import the required classes path:
    import codes.reactive.scalatime._
    import syntax._

    // Obtain a Duration instance from a Long
    val duration = 10L minutes

    val otherDuration = 1L minute

    // Tries to obtain a Period instance from an Int
    val period = 2 weeks

    // Obtain a LocalDate instance
    val localDate = LocalDate.of(2014, 6, 7)

    // Obtain the current UTC ZonedDateTime
    val zonedDateTime = ZonedDateTime()

    // Obtain a default TemporalQuery for the ZoneId
    val query = temporal.TemporalQuery.zone

    // Obtain a Duration instance from a sum of Durations
    duration + otherDuration

    //  Add a TemporalAmount to a Temporal
    localDate.get + period

    //  Add a TemporalAmount to a Temporal
    period <<+ localDate.get

    // Subtract a TemporalAmount from a Temporal
    localDate.get - period

    // Query a specified Temporal
    val result = query << zonedDateTime
}}}
