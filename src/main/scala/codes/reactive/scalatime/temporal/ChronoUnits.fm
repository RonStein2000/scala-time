/*******************************************************************
 * See the NOTICE file distributed with this work for additional   *
 * information regarding Copyright ownership.  The author/authors  *
 * license this file to you under the terms of the Apache License, *
 * Version 2.0 (the "License"); you may not use this file except   *
 * in compliance with the License.  You may obtain a copy of the   *
 * License at:                                                     *
 *                                                                 *
 *     http://www.apache.org/licenses/LICENSE-2.0                  *
 *                                                                 *
 * Unless required by applicable law or agreed to in writing,      *
 * software distributed under the License is distributed on an     *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY          *
 * KIND, either express or implied.  See the License for the       *
 * specific language governing permissions and limitations         *
 * under the License.                                              *
 *******************************************************************/

package codes.reactive.scalatime
package temporal

import ${tPac}.temporal.{ChronoUnit => CU}


/** Provides a standard set of date period units as [[TemporalUnit]] instances.
  *
  * @since  0.1.0
  *
  * @define Unit  [[ChronoUnit]] representing the concept of
  * @define Iso   For the ISO calendar system,
  */
trait ChronoUnits {

  /** $Unit a century. $Iso equal to 100 years. */
  final val Centuries = CU.CENTURIES

  /** $Unit a day. $Iso equal to the standard day from midnight to midnight. The estimated duration of a day is
    * 24 Hours.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems a [[Day]] must correspond to the day defined by the rising and setting of
    * the Sun on Earth.
    *
    * It is not required that days begin at midnight; however the date should be equivalent at midday.
    */
  final val Days = CU.DAYS

  /** $Unit a decade. $Iso equal to 10 years.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems [[Decades]] must correspond to an integral number of days, and is normally
    * an integral number of years.
    */
  final val Decades = CU.DECADES

  /** $Unit an era. The ISO calendar system doesn't have eras thus it is impossible to add an era to a date or date-time.
    * The estimated duration of the era is artificially defined as 1,000,000,000 Years.
    */
  final val Eras = CU.ERAS

  /** $Unit Forever. This is primarily used with [[TemporalField]] to represent unbounded fields such as the year or era.
    * The estimated duration of the era is artificially defined as the largest duration supported by [[Duration]].
    */
  final val Forever = CU.FOREVER

  /** $Unit half a day, as used in AM/PM. $Iso equal to 12 hours. */
  final val HalfDays = CU.HALF_DAYS

  /** $Unit an hour. $Iso equal to 60 minutes. */
  final val Hours = CU.HOURS

  /** $Unit a microsecond. $Iso equal to the 1,000,000th part of the second unit. */
  final val Micros = CU.MICROS

  /** $Unit a millenium. $Iso equal to 1000 years.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems it must correspond to an integral number of days and is normally an integral
    * number of years.
    */
  final val Millenia = CU.MILLENNIA

  /** $Unit a millisecond. $Iso equal to the 1,000th part of the second unit. */
  final val Millis = CU.MILLIS

  /** $Unit a minute. $Iso equal to the 60 seconds. */
  final val Minutes = CU.MINUTES

  /** $Unit a month. $Iso the length of the month varies by month-of-year. The estimated duration of a month is one
    * twelfth of 365.2425 Days.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems it must correspond to an integral number of days.
    */
  final val Months = CU.MONTHS

  /** $Unit a nanosecond, the smallest supported unit of time. $Iso equal to the 1,000,000,000th  part of the second
    * unit.
    */
  final val Nanos = CU.NANOS

  /** $Unit a second. $Iso equal to the second in the SI system of units, except around a leap-second. */
  final val Seconds = CU.SECONDS

  /** $Unit a week. $Iso equal to 7 days.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems it must correspond to an integral number of days.
    */
  final val Weeks = CU.WEEKS

  /** $Unit a year. $Iso equal to 12 months. The estimated duration of a year is 365.2425 Days.
    *
    * ==== Non  ISO Calendar Systems ====
    * When used with other calendar systems it must correspond to an integral number of days or months roughly equal
    * to a year defined by the passage of the Earth around the Sun.
    */
  final val Years = CU.YEARS
}
